ALTER SYSTEM FLUSH BUFFER_CACHE;
-- Command to check existant clusters
SELECT * 
FROM USER_CLUSTERS;


-- Drop the tablespace (if needed) along with its contents and datafiles.
DROP TABLESPACE cergy_clusters INCLUDING CONTENTS AND DATAFILES;

-- Create the tablespace for clusters
CREATE TABLESPACE cergy_clusters
    DATAFILE 'cergy_clusters.dbf' SIZE 100M
    EXTENT MANAGEMENT LOCAL AUTOALLOCATE;



--------------------------------------------------------------------------------------------
-- Create the cluster for network_id in the existing tablespace cergy_clusters
--------------------------------------------------------------------------------------------
CREATE CLUSTER network_cluster (network_id NUMBER)
    TABLESPACE cergy_clusters
    SIZE 512;

CREATE INDEX idx_cluster_network_id ON CLUSTER network_cluster;


DROP TABLE clustered_network CASCADE CONSTRAINTS;
DROP TABLE clustered_ip_address CASCADE CONSTRAINTS;
------------------------------------------------------------
-- Create the clustered version of NETWORK table
------------------------------------------------------------
CREATE TABLE clustered_network (
    network_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    site_id         NUMBER NOT NULL,
    name            VARCHAR2(50) NOT NULL,
    network_address VARCHAR2(50) NOT NULL,
    netmask         VARCHAR2(50) NOT NULL,
    gateway         VARCHAR2(50),
    created_at      TIMESTAMP DEFAULT SYSTIMESTAMP,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_clustered_network PRIMARY KEY (network_id),
    CONSTRAINT fk_clustered_network_site FOREIGN KEY (site_id) REFERENCES SITE(site_id)
)
CLUSTER network_cluster (network_id);

------------------------------------------------------------
-- Create the clustered version of IP_ADDRESS table
------------------------------------------------------------
CREATE TABLE clustered_ip_address (
    ip_id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    network_id  NUMBER NOT NULL,
    asset_id    NUMBER,
    ip_address  VARCHAR2(50) NOT NULL,
    is_dynamic  NUMBER(1) DEFAULT 0,
    created_at  TIMESTAMP DEFAULT SYSTIMESTAMP,
    updated_at  TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_clustered_ip_address PRIMARY KEY (ip_id),
    CONSTRAINT fk_clustered_ip_network FOREIGN KEY (network_id) REFERENCES clustered_network(network_id),
    CONSTRAINT fk_clustered_ip_asset FOREIGN KEY (asset_id) REFERENCES ASSET(asset_id),
    CONSTRAINT uq_clustered_network_ip UNIQUE (network_id, ip_address)
)
CLUSTER network_cluster (network_id);


------------------------------------------------------------
-- Migrate data from original tables to the new clustered tables.
------------------------------------------------------------
-- Migrate NETWORK data
INSERT INTO clustered_network (
    network_id,
    site_id,
    name,
    network_address,
    netmask,
    gateway,
    created_at,
    updated_at
)
SELECT
    network_id,
    site_id,
    name,
    network_address,
    netmask,
    gateway,
    created_at,
    updated_at
FROM NETWORK;

-- Migrate IP_ADDRESS data
INSERT INTO clustered_ip_address (
    ip_id,
    network_id,
    asset_id,
    ip_address,
    is_dynamic,
    created_at,
    updated_at
)
SELECT
    ip_id,
    network_id,
    asset_id,
    ip_address,
    is_dynamic,
    created_at,
    updated_at
FROM IP_ADDRESS;

COMMIT;

-------------------------------------------------------------------------
-- Non‑clustered : EXPLAIN PLAN for the original tables
-------------------------------------------------------------------------
EXPLAIN PLAN FOR
SELECT ip.ip_address
    FROM NETWORK n
    JOIN IP_ADDRESS ip ON n.network_id = ip.network_id
    WHERE n.network_id = 2;

-- Display the plan
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-------------------------------------------------------------------------
-- Clustered : EXPLAIN PLAN for the clustered tables
-------------------------------------------------------------------------
EXPLAIN PLAN FOR
SELECT ip.ip_address
    FROM CLUSTERED_NETWORK n
    JOIN CLUSTERED_IP_ADDRESS ip ON n.network_id = ip.network_id
    WHERE n.network_id = 2;

-- Display the plan
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);






DROP INDEX idx_asset_type_cluster;
DROP CLUSTER asset_type_cluster;
-----------------------------------------------------------------------------------------------
-- Create the cluster 'asset_type_cluster' 
-----------------------------------------------------------------------------------------------
CREATE CLUSTER asset_type_cluster (asset_type_id NUMBER)
    TABLESPACE cergy_clusters
    SIZE 512;

CREATE INDEX idx_asset_type_cluster ON CLUSTER asset_type_cluster;



DROP TABLE clustered_asset_type CASCADE CONSTRAINTS;
DROP TABLE clustered_asset_type CASCADE CONSTRAINTS;

CREATE TABLE clustered_asset_type (
    asset_type_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    system_name   VARCHAR2(100),
    label         VARCHAR2(100) NOT NULL,
    model_name    VARCHAR2(100),
    is_active     NUMBER(1) DEFAULT 1,
    created_at    TIMESTAMP DEFAULT SYSTIMESTAMP,
    updated_at    TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_clustered_asset_type PRIMARY KEY (asset_type_id)
)
CLUSTER asset_type_cluster (asset_type_id);


CREATE TABLE clustered_asset (
    asset_id         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    asset_type_id    NUMBER NOT NULL,
    name             VARCHAR2(100),
    serial           VARCHAR2(100),
    assigned_user_id NUMBER,
    site_id          NUMBER NOT NULL,
    purchase_date    DATE,
    status           VARCHAR2(20) DEFAULT 'active',
    created_at       TIMESTAMP DEFAULT SYSTIMESTAMP,
    updated_at       TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_clustered_asset PRIMARY KEY (asset_id),
    CONSTRAINT fk_clustered_asset_type FOREIGN KEY (asset_type_id) REFERENCES clustered_asset_type(asset_type_id),
    CONSTRAINT fk_clustered_asset_site FOREIGN KEY (site_id) REFERENCES SITE(site_id),
    CONSTRAINT fk_clustered_asset_assigned_user FOREIGN KEY (assigned_user_id) REFERENCES USER_ACCOUNT(user_id),
    CONSTRAINT chk_clustered_asset_status CHECK (status IN ('active','maintenance','decommissioned'))
)
CLUSTER asset_type_cluster (asset_type_id);




------------------------------------------------------------
-- Migration des données de ASSET_TYPE vers clustered_asset_type
------------------------------------------------------------
INSERT INTO clustered_asset_type (
    asset_type_id,
    system_name,
    label,
    model_name,
    is_active,
    created_at,
    updated_at
)
SELECT 
    asset_type_id,
    system_name,
    label,
    model_name,
    is_active,
    created_at,
    updated_at
FROM ASSET_TYPE;

------------------------------------------------------------
-- Migration des données de ASSET vers clustered_asset
------------------------------------------------------------
INSERT INTO clustered_asset (
    asset_id,
    asset_type_id,
    name,
    serial,
    assigned_user_id,
    site_id,
    purchase_date,
    status,
    created_at,
    updated_at
)
SELECT 
    asset_id,
    asset_type_id,
    name,
    serial,
    assigned_user_id,
    site_id,
    purchase_date,
    status,
    created_at,
    updated_at
FROM ASSET;

COMMIT;



EXPLAIN PLAN FOR
SELECT a.asset_id,
        a.name,
        at.label,
        at.model_name
    FROM ASSET a
    JOIN ASSET_TYPE at ON a.asset_type_id = at.asset_type_id
    WHERE a.site_id = 1;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


EXPLAIN PLAN FOR
    SELECT a.asset_id,
        a.name,
        at.label,
        at.model_name
    FROM clustered_asset a
    JOIN clustered_asset_type at ON a.asset_type_id = at.asset_type_id
    WHERE a.site_id = 1;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);







-- DROP INDEX idx_user_ticket_cluster;
-- DROP CLUSTER user_ticket_cluster;
-----------------------------------------------------------------------------------------------
-- Create the cluster 'user_ticket_cluster' 
-----------------------------------------------------------------------------------------------
-- CREATE CLUSTER user_ticket_cluster (site_id NUMBER)
--     TABLESPACE cergy_clusters
--     SIZE 512;

-- CREATE INDEX idx_user_ticket_cluster ON CLUSTER user_ticket_cluster;


DROP TABLE clustered_user_account CASCADE CONSTRAINT;
DROP TABLE clustered_ticket CASCADE CONSTRAINT;

-- CREATE TABLE clustered_user_account (
--     user_id    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
--     username   VARCHAR2(50) NOT NULL,
--     password   VARCHAR2(255) NOT NULL,
--     first_name VARCHAR2(50),
--     last_name  VARCHAR2(50),
--     email      VARCHAR2(100),
--     phone      VARCHAR2(20),
--     site_id    NUMBER NOT NULL,
--     role_id    NUMBER,
--     created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
--     updated_at TIMESTAMP DEFAULT SYSTIMESTAMP,
--     CONSTRAINT pk_clustered_user_account PRIMARY KEY (user_id),
--     CONSTRAINT uq_username_clustered UNIQUE (username),
--     CONSTRAINT uq_email_clustered UNIQUE (email),
--     CONSTRAINT fk_clustered_user_site FOREIGN KEY (site_id) REFERENCES SITE(site_id),
--     CONSTRAINT fk_clustered_user_role FOREIGN KEY (role_id) REFERENCES USER_ROLE(role_id)
-- )
-- CLUSTER user_ticket_cluster (site_id);

-- CREATE TABLE clustered_ticket (
--     ticket_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
--     user_id        NUMBER NOT NULL,       -- L'utilisateur qui crée le ticket
--     site_id        NUMBER NOT NULL,       -- Site concerné
--     subject        VARCHAR2(100) NOT NULL,
--     description    VARCHAR2(4000),
--     status         VARCHAR2(20) DEFAULT 'open',   -- ex : open, pending, closed
--     priority       VARCHAR2(20) DEFAULT 'medium', -- ex : low, medium, high
--     creation_date  DATE DEFAULT SYSDATE,
--     updated_date   DATE DEFAULT SYSDATE,
--     resolution_date DATE,                      -- Date de résolution/fermeture du ticket
--     assigned_to    NUMBER,                    -- Technicien assigné (référence à USER_ACCOUNT)
--     updated_by     NUMBER,                    -- Dernier utilisateur ayant mis à jour le ticket
--     CONSTRAINT pk_clustered_ticket PRIMARY KEY (ticket_id),
--     CONSTRAINT fk_clustered_ticket_user FOREIGN KEY (user_id) REFERENCES USER_ACCOUNT(user_id),
--     CONSTRAINT fk_clustered_ticket_site FOREIGN KEY (site_id) REFERENCES SITE(site_id),
--     CONSTRAINT fk_clustered_ticket_assigned_to FOREIGN KEY (assigned_to) REFERENCES clustered_user_account(user_id),
--     CONSTRAINT chk_clustered_ticket_status CHECK (status IN ('open','pending','closed')),
--     CONSTRAINT chk_clustered_ticket_priority CHECK (priority IN ('low','medium','high'))
-- )
-- CLUSTER user_ticket_cluster (site_id);




------------------------------------------------------------
-- Migration des données de USER_ACCOUNT vers CLUSTERED_USER_ACCOUNT
------------------------------------------------------------
-- INSERT INTO clustered_user_account (
--     user_id,
--     username,
--     password,
--     first_name,
--     last_name,
--     email,
--     phone,
--     site_id,
--     role_id,
--     created_at,
--     updated_at
-- )
-- SELECT 
--     user_id,
--     username,
--     password,
--     first_name,
--     last_name,
--     email,
--     phone,
--     site_id,
--     role_id,
--     created_at,
--     updated_at
-- FROM USER_ACCOUNT;

------------------------------------------------------------
-- Migration des données de TICKET vers CLUSTERED_TICKET
------------------------------------------------------------
-- INSERT INTO clustered_ticket (
--     ticket_id,
--     user_id,
--     site_id,
--     subject,
--     description,
--     status,
--     priority,
--     creation_date,
--     updated_date,
--     resolution_date,
--     assigned_to,
--     updated_by
-- )
-- SELECT 
--     ticket_id,
--     user_id,
--     site_id,
--     subject,
--     description,
--     status,
--     priority,
--     creation_date,
--     updated_date,
--     resolution_date,
--     assigned_to,
--     updated_by
-- FROM TICKET;

-- COMMIT;



-- EXPLAIN PLAN FOR
-- SELECT u.username,
--         t.ticket_id,
--         t.subject,
--         t.description
--     FROM TICKET t
--     JOIN USER_ACCOUNT u ON t.user_id = u.user_id
--     WHERE t.site_id = 1;

-- SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


-- EXPLAIN PLAN FOR
-- SELECT u.username,
--         ct.ticket_id,
--         ct.subject,
--         ct.description
--     FROM clustered_ticket ct
--     JOIN clustered_user_account u ON ct.user_id = u.user_id
--     WHERE ct.site_id = 1;

-- SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);






-- DROP CLUSTER user_asset_cluster;
-----------------------------------------------------------------------------------------------
-- Create the cluster 'user_asset_cluster'
-----------------------------------------------------------------------------------------------
-- CREATE CLUSTER user_asset_cluster (site_id NUMBER)
--     TABLESPACE cergy_clusters
--     SIZE 512;

-- CREATE INDEX idx_user_asset_cluster ON CLUSTER user_asset_cluster;


-- DROP TABLE clustered_user_account CASCADE CONSTRAINTS;
-- DROP TABLE clustered_asset CASCADE CONSTRAINTS;
------------------------------------------------------------
-- Create clustered versions of USER_ACCOUNT and ASSET tables
------------------------------------------------------------
-- CREATE TABLE clustered_user_account (
--     user_id    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
--     username   VARCHAR2(50) NOT NULL,
--     password   VARCHAR2(255) NOT NULL,
--     first_name VARCHAR2(50),
--     last_name  VARCHAR2(50),
--     email      VARCHAR2(100),
--     phone      VARCHAR2(20),
--     site_id    NUMBER NOT NULL,
--     role_id    NUMBER,
--     created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
--     updated_at TIMESTAMP DEFAULT SYSTIMESTAMP,
--     CONSTRAINT pk_clustered_user_account PRIMARY KEY (user_id),
--     CONSTRAINT uq_clustered_username UNIQUE (username),
--     CONSTRAINT uq_clustered_email UNIQUE (email),
--     CONSTRAINT fk_clustered_user_site FOREIGN KEY (site_id) REFERENCES SITE(site_id),
--     CONSTRAINT fk_clustered_user_role FOREIGN KEY (role_id) REFERENCES USER_ROLE(role_id)
-- )
-- CLUSTER user_asset_cluster (site_id);

-- CREATE TABLE clustered_asset (
--     asset_id         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
--     asset_type_id    NUMBER NOT NULL,          -- Référence vers ASSET_TYPE
--     name             VARCHAR2(100),            -- Nom descriptif
--     serial           VARCHAR2(100),            -- Numéro de série
--     assigned_user_id NUMBER,                   -- Référence vers USER_ACCOUNT (si applicable)
--     site_id          NUMBER NOT NULL,          -- Référence vers SITE (multi-site)
--     purchase_date    DATE,                     -- Date d'achat ou d'acquisition
--     status           VARCHAR2(20) DEFAULT 'active',  -- ex : active, maintenance, decommissioned
--     created_at       TIMESTAMP DEFAULT SYSTIMESTAMP,
--     updated_at       TIMESTAMP DEFAULT SYSTIMESTAMP,
--     CONSTRAINT pk_clustered_asset PRIMARY KEY (asset_id),
--     CONSTRAINT uq_clustered_asset_serial UNIQUE (serial),
--     CONSTRAINT fk_clustered_asset_type FOREIGN KEY (asset_type_id) REFERENCES ASSET_TYPE(asset_type_id),
--     CONSTRAINT fk_clustered_asset_site FOREIGN KEY (site_id) REFERENCES SITE(site_id),
--     CONSTRAINT fk_clustered_asset_assigned_user FOREIGN KEY (assigned_user_id) REFERENCES clustered_user_account(user_id),
--     CONSTRAINT chk_clustered_asset_status CHECK (status IN ('active','maintenance','decommissioned'))
-- )
-- CLUSTER user_asset_cluster (site_id);


------------------------------------------------------------
-- Migrate data
------------------------------------------------------------
-- INSERT INTO clustered_user_account (
--     user_id, username, password, first_name, last_name,
--     email, phone, site_id, role_id, created_at, updated_at
-- )
-- SELECT
--     user_id, username, password, first_name, last_name,
--     email, phone, site_id, role_id, created_at, updated_at
-- FROM USER_ACCOUNT;

-- INSERT INTO clustered_asset (
--     asset_id, asset_type_id, name, serial, assigned_user_id,
--     site_id, purchase_date, status, created_at, updated_at
-- )
-- SELECT
--     asset_id, asset_type_id, name, serial, assigned_user_id,
--     site_id, purchase_date, status, created_at, updated_at
-- FROM ASSET;

-- COMMIT;


---------------------------------------------------------------------------------
-- Non-clustered: EXPLAIN PLAN
---------------------------------------------------------------------------------
-- EXPLAIN PLAN FOR
-- SELECT u.username,
--         a.asset_id,
--         a.name AS asset_name
--     FROM ASSET a
--         JOIN USER_ACCOUNT u ON a.assigned_user_id = u.user_id
--     WHERE a.site_id = 1;

-- SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


---------------------------------------------------------------------------------
-- Clustered: EXPLAIN PLAN
---------------------------------------------------------------------------------
-- EXPLAIN PLAN FOR
-- SELECT u.username,
--         a.asset_id,
--         a.name AS asset_name
--     FROM CLUSTERED_ASSET a
--         JOIN CLUSTERED_USER_ACCOUNT u ON a.assigned_user_id = u.user_id
--     WHERE a.site_id = 1;

-- SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);
